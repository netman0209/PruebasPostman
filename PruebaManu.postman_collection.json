{
	"info": {
		"_postman_id": "7f03c2cf-bc56-4b36-aa20-52f959a62fb0",
		"name": "Prueba Manu",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20151278"
	},
	"item": [
		{
			"name": "Prueba Postman Manu",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que el código de estado sea 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Validar que el primer objeto tenga el campo 'userId' correcto\r",
							"pm.test(\"El valor del campo 'userId' del primer objeto es correcto\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0].userId).to.eql(1);\r",
							"});\r",
							"\r",
							"\r",
							"// Validar que el primer objeto tenga el campo 'id' correcto\r",
							"pm.test(\"El valor del campo 'id' del primer objeto es correcto\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0].id).to.eql(1);\r",
							"});\r",
							"\r",
							"// Validar que el primer objeto tenga el campo 'title' correcto\r",
							"pm.test(\"El valor del campo 'title' del primer objeto es correcto\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0].title).to.eql(\"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\");\r",
							"});\r",
							"\r",
							"// Validar que el primer objeto tenga el campo 'body' correcto\r",
							"pm.test(\"El valor del campo 'body' del primer objeto es correcto\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0].body).to.eql(\"quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Prueba Postman Manu Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que el código de estado sea 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Validar que el primer objeto tenga el campo 'userId' correcto\r",
							"pm.test(\"El valor del campo 'userId' del primer objeto es correcto\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0].userId).to.eql(1);\r",
							"});\r",
							"\r",
							"\r",
							"// Validar que el primer objeto tenga el campo 'id' correcto\r",
							"pm.test(\"El valor del campo 'id' del primer objeto es correcto\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0].id).to.eql(1);\r",
							"});\r",
							"\r",
							"// Validar que el primer objeto tenga el campo 'title' correcto\r",
							"pm.test(\"El valor del campo 'title' del primer objeto es correcto\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0].title).to.eql(\"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\");\r",
							"});\r",
							"\r",
							"// Validar que el primer objeto tenga el campo 'body' correcto\r",
							"pm.test(\"El valor del campo 'body' del primer objeto es correcto\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0].body).to.eql(\"quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Prueba Postman Manu Copy 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que el código de estado sea 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Validar que el primer objeto tenga el campo 'userId' correcto\r",
							"pm.test(\"El valor del campo 'userId' del primer objeto es correcto\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0].userId).to.eql(1);\r",
							"});\r",
							"\r",
							"\r",
							"// Validar que el primer objeto tenga el campo 'id' correcto\r",
							"pm.test(\"El valor del campo 'id' del primer objeto es correcto\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0].id).to.eql(1);\r",
							"});\r",
							"\r",
							"// Validar que el primer objeto tenga el campo 'title' correcto\r",
							"pm.test(\"El valor del campo 'title' del primer objeto es correcto\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0].title).to.eql(\"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\");\r",
							"});\r",
							"\r",
							"// Validar que el primer objeto tenga el campo 'body' correcto\r",
							"pm.test(\"El valor del campo 'body' del primer objeto es correcto\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0].body).to.eql(\"quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		}
	]
}
